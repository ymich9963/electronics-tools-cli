        -:    0:Source:../twc.c
        -:    0:Graph:twc.gcno
        -:    0:Data:twc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "twc.h"
        -:    2:
       33:    3:int get_options(int* argc, char** argv, ip_t* ip) {
       33:    4:    unsigned char num_rec = 0; /* Used to record the two allowed numerical options */
        -:    5:    double val; /* Temporary value to store the argument */
        -:    6:
       33:    7:    if(*argc == 1) {
        1:    8:        printf(WELCOME_STR);
        1:    9:        return 0;
        -:   10:    }
        -:   11:
       92:   12:    for(int i = 1; i < *argc; i++) {
        -:   13:        /* Check these options before anything else */
       81:   14:        if (!(strcmp("-h", argv[i])) || !(strcmp("--help", argv[i]))) {
        1:   15:            output_help();
        1:   16:            return 0;
        -:   17:        } 
       80:   18:        if (!(strcmp("--version", argv[i]))) {
        2:   19:            printf(VERSION_STR);
        2:   20:            return 0;
        -:   21:        } 
        -:   22:        /* Important to check when using the default numerical behaviour */
       78:   23:        if (*argc == 2) {
        1:   24:            fprintf(stderr, "%s\n", FEW_ARGS_STR);
        1:   25:            return 1;
        -:   26:        }
       77:   27:        if (!(strcmp("-o", argv[i])) || !(strcmp("--output", argv[i]))) {
        6:   28:            ip->ofile.oflag = true;
        6:   29:            set_output_file(&ip->ofile, argv[i + 1]);
        6:   30:            i++;
        6:   31:            continue;
        -:   32:        }
       71:   33:        if(!(strcmp("-c", argv[i])) || !(strcmp("--current", argv[i]))) {
        -:   34:            // TODO: Try to simplify or abstract the code execution at each if-branch
       10:   35:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
       10:   36:            CHECK_LIMITS(val);
       10:   37:            ip->current.outval = val;
       10:   38:            ip->current.val = val;
       10:   39:            ip->current.units = "A";
       10:   40:            i++;
       10:   41:            continue;
        -:   42:        }
       61:   43:        if(!strcmp("--current-mA", argv[i])) {
        1:   44:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:   45:            CHECK_LIMITS(val);
        1:   46:            ip->current.outval = val;
        1:   47:            ip->current.val = 10e-3 * val;
        1:   48:            ip->current.units = "mA";
        1:   49:            i++;
        1:   50:            continue;
        -:   51:        }
       60:   52:        if(!(strcmp("-w", argv[i])) || !(strcmp("--copper-weight", argv[i]))) {
        9:   53:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        9:   54:            CHECK_LIMITS(val);
        9:   55:            ip->copper_weight.outval = val;
        9:   56:            ip->copper_weight.val = val;
        9:   57:            ip->copper_weight.units = "oz/ft^2";
        9:   58:            i++;
        9:   59:            continue;
        -:   60:        }
       51:   61:        if(!(strcmp("--copper-weight-mil", argv[i]))) {
        1:   62:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:   63:            CHECK_LIMITS(val);
        1:   64:            ip->copper_weight.outval = val;
        1:   65:            ip->copper_weight.val = CONV_MIL_TO_OZFT2(val); /* Convert back to oz/ft^2 for the calculations to work */
        1:   66:            ip->copper_weight.units = "mil";
        1:   67:            i++;
        1:   68:            continue;
        -:   69:        }
       50:   70:        if(!(strcmp("--copper-weight-mm", argv[i]))) {
        1:   71:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:   72:            CHECK_LIMITS(val);
        1:   73:            ip->copper_weight.outval = val;
        1:   74:            ip->copper_weight.val = CONV_MM_TO_OZFT2(val); 
        1:   75:            ip->copper_weight.units = "mm";
        1:   76:            i++;
        1:   77:            continue;
        -:   78:        }
       49:   79:        if(!(strcmp("--copper-weight-um", argv[i]))) {
        1:   80:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:   81:            CHECK_LIMITS(val);
        1:   82:            ip->copper_weight.outval = val;
        1:   83:            ip->copper_weight.val = CONV_UM_TO_OZFT2(val); 
        1:   84:            ip->copper_weight.units = "um";
        1:   85:            i++;
        1:   86:            continue;
        -:   87:        }
       48:   88:        if(!(strcmp("-r", argv[i])) || !(strcmp("--temperature-rise", argv[i]))) {
        2:   89:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:   90:            CHECK_LIMITS(val);
        2:   91:            ip->temperature_rise.outval = val;
        2:   92:            ip->temperature_rise.val = val;
        2:   93:            ip->temperature_rise.units = "C";
        2:   94:            i++;
        2:   95:            continue;
        -:   96:        }
       46:   97:        if(!(strcmp("--temperature-rise-F", argv[i]))) {
        1:   98:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:   99:            CHECK_LIMITS(val);
        1:  100:            ip->temperature_rise.outval = val;
        1:  101:            ip->temperature_rise.val = CONV_FAHR_TO_CELS(val);
        1:  102:            ip->temperature_rise.units = "F";
        1:  103:            i++;
        1:  104:            continue;
        -:  105:        }
       45:  106:        if(!(strcmp("-a", argv[i])) || !(strcmp("--temperature-ambient", argv[i]))) {
        2:  107:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  108:            CHECK_LIMITS(val);
        2:  109:            ip->temperature_ambient.outval = val;
        2:  110:            ip->temperature_ambient.val = val;
        2:  111:            ip->temperature_ambient.units = "C";
        2:  112:            i++;
        2:  113:            continue;
        -:  114:        }
       43:  115:        if(!(strcmp("--temperature-ambient-F", argv[i]))) {
        1:  116:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  117:            CHECK_LIMITS(val);
        1:  118:            ip->temperature_ambient.outval = val;
        1:  119:            ip->temperature_ambient.val = CONV_FAHR_TO_CELS(val);
        1:  120:            ip->temperature_ambient.units = "F";
        1:  121:            i++;
        1:  122:            continue;
        -:  123:        }
       42:  124:        if(!(strcmp("-l", argv[i])) || !(strcmp("--trace-length", argv[i]))) {
        2:  125:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  126:            CHECK_LIMITS(val);
        2:  127:            ip->trace_length.outval = val;
        2:  128:            ip->trace_length.val = val;
        2:  129:            ip->trace_length.units = "cm";
        2:  130:            i++;
        2:  131:            continue;
        -:  132:        }
       40:  133:        if(!(strcmp("--trace-length-mm", argv[i]))) {
        1:  134:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  135:            CHECK_LIMITS(val);
        1:  136:            ip->trace_length.outval = val;
        1:  137:            ip->trace_length.val = 10e-1 * val;
        1:  138:            ip->trace_length.units = "mm";
        1:  139:            i++;
        1:  140:            continue;
        -:  141:        }
       39:  142:        if(!(strcmp("--trace-length-mil", argv[i]))) {
        1:  143:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  144:            CHECK_LIMITS(val);
        1:  145:            ip->trace_length.outval = val;
        1:  146:            ip->trace_length.val = CONV_MIL_TO_MM(10e-1 * val);
        1:  147:            ip->trace_length.units = "mil";
        1:  148:            i++;
        1:  149:            continue;
        -:  150:        }
       38:  151:        if(!(strcmp("-t", argv[i])) || !(strcmp("--pcb-thickness", argv[i]))) {
        2:  152:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  153:            CHECK_LIMITS(val);
        2:  154:            ip->pcb_thickness.outval = val;
        2:  155:            ip->pcb_thickness.val = val;
        2:  156:            ip->pcb_thickness.units = "mil";
        2:  157:            i++;
        2:  158:            continue;
        -:  159:        }
       36:  160:        if(!(strcmp("--pcb-thickness-mm", argv[i]))) {
        1:  161:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  162:            CHECK_LIMITS(val);
        1:  163:            ip->pcb_thickness.outval = val;
        1:  164:            ip->pcb_thickness.val = CONV_MM_TO_MIL(val);
        1:  165:            ip->pcb_thickness.units = "mm";
        1:  166:            i++;
        1:  167:            continue;
        -:  168:        }
       35:  169:        if(!(strcmp("-e", argv[i])) || !(strcmp("--pcb-thermal-conductivity", argv[i]))) {
        2:  170:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  171:            CHECK_LIMITS(val);
        2:  172:            ip->pcb_thermal_cond.outval = val;
        2:  173:            ip->pcb_thermal_cond.val = CONV_WmK_TO_BTUhftF(val);
        2:  174:            ip->pcb_thermal_cond.units = "W/mK";
        2:  175:            i++;
        2:  176:            continue;
        -:  177:        }
       33:  178:        if(!(strcmp("-p", argv[i])) || !(strcmp("--plane-area", argv[i]))) {
        2:  179:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  180:            CHECK_LIMITS(val);
        2:  181:            ip->plane_area.outval = val;
        2:  182:            ip->plane_area.val = val;
        2:  183:            ip->plane_area.units = "in^2";
        2:  184:            i++;
        2:  185:            continue;
        -:  186:        }
       31:  187:        if(!(strcmp("--plane-area-cm2", argv[i]))) {
        1:  188:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  189:            CHECK_LIMITS(val);
        1:  190:            ip->plane_area.outval = val;
        1:  191:            ip->plane_area.val = CONV_CM2_TO_INCH2(val);
        1:  192:            ip->plane_area.units = "cm^2";
        1:  193:            i++;
        1:  194:            continue;
        -:  195:        }
       30:  196:        if(!(strcmp("-d", argv[i])) || !(strcmp("--plane-distance", argv[i]))) {
        2:  197:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        2:  198:            CHECK_LIMITS(val);
        2:  199:            ip->plane_distance.outval = val;
        2:  200:            ip->plane_distance.val = val;
        2:  201:            ip->plane_distance.units = "mil";
        2:  202:            i++;
        2:  203:            continue;
        -:  204:        }
       28:  205:        if(!(strcmp("--plane-distance-mm", argv[i]))) {
        1:  206:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  207:            CHECK_LIMITS(val);
        1:  208:            ip->plane_distance.outval = val;
        1:  209:            ip->plane_distance.val = CONV_MM_TO_MIL(val);
        1:  210:            ip->plane_distance.units = "mm";
        1:  211:            i++;
        1:  212:            continue;
        -:  213:        }
       27:  214:        if(!(strcmp("--resistivity", argv[i]))) {
        1:  215:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  216:            CHECK_LIMITS(val);
        1:  217:            ip->resistivity.val = val;
        1:  218:            i++;
        1:  219:            continue;
        -:  220:        }
       26:  221:        if(!(strcmp("--temperature-coefficient", argv[i]))) {
        1:  222:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  223:            CHECK_LIMITS(val);
        1:  224:            ip->a.val = val;
        1:  225:            i++;
        1:  226:            continue;
        -:  227:        }
       25:  228:        if(!(strcmp("-m", argv[i])) || !(strcmp("--metric", argv[i]))) {
        2:  229:            ip->uflag = 'm';
        2:  230:            continue;
        -:  231:        }
       23:  232:        if(!(strcmp("-i", argv[i])) || !(strcmp("--imperial", argv[i]))) {
        2:  233:            ip->uflag = 'i';
        2:  234:            continue;
        -:  235:        }
        -:  236:        /* Checks for the numerical options */
       21:  237:        if(sscanf(argv[i], "%lf", &val) && (num_rec == 0)) {
        1:  238:            num_rec++;
        1:  239:            ip->current.outval = val;
        1:  240:            ip->current.val = val;
        1:  241:            ip->current.units = "A";
        1:  242:            continue;
        -:  243:        }
       20:  244:        if((sscanf(argv[i], "%lf", &val)) && (num_rec == 1)) {
        1:  245:            num_rec++;
        1:  246:            ip->copper_weight.outval = val;
        1:  247:            ip->copper_weight.val = val;
        1:  248:            ip->copper_weight.units = "oz/ft^2";
        1:  249:            continue;
        -:  250:        }
        -:  251:
        -:  252:        /* Conversions */
       19:  253:        if(!(strcmp("--convert-mil2-cm2", argv[i]))) {
        1:  254:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  255:            CHECK_LIMITS(val);
        1:  256:            printf("\n%lf\n\n", CONV_MIL2_TO_CM2(val));
        1:  257:            printf("Converted using the TWC.\n");
        1:  258:            return 1;
        -:  259:        }
       18:  260:        if(!(strcmp("--convert-mil2-mm2", argv[i]))) {
        1:  261:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  262:            CHECK_LIMITS(val);
        1:  263:            printf("\n%lf\n\n", CONV_MIL2_TO_MM2(val));
        1:  264:            printf("Converted using the TWC.\n");
        1:  265:            return 1;
        -:  266:        }
       17:  267:        if(!(strcmp("--convert-mm2-mil2", argv[i]))) {
        1:  268:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  269:            CHECK_LIMITS(val);
        1:  270:            printf("\n%lf\n\n", CONV_MM2_TO_MIL2(val));
        1:  271:            printf("Converted using the TWC.\n");
        1:  272:            return 1;
        -:  273:        }
       16:  274:        if(!(strcmp("--convert-cm2-in2", argv[i]))) {
        1:  275:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  276:            CHECK_LIMITS(val);
        1:  277:            printf("\n%lf\n\n", CONV_CM2_TO_INCH2(val));
        1:  278:            printf("Converted using the TWC.\n");
        1:  279:            return 1;
        -:  280:        }
       15:  281:        if(!(strcmp("--convert-mil-ozft2", argv[i]))) {
        1:  282:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  283:            CHECK_LIMITS(val);
        1:  284:            printf("\n%lf\n\n", CONV_MIL_TO_OZFT2(val));
        1:  285:            printf("Converted using the TWC.\n");
        1:  286:            return 1;
        -:  287:        }
       14:  288:        if(!(strcmp("--convert-mm-ozft2", argv[i]))) {
        1:  289:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  290:            CHECK_LIMITS(val);
        1:  291:            printf("\n%lf\n\n", CONV_MM_TO_OZFT2(val) );
        1:  292:            printf("Converted using the TWC.\n");
        1:  293:            return 1;
        -:  294:        }
       13:  295:        if(!(strcmp("--convert-um-ozft2", argv[i]))) {
        1:  296:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  297:            CHECK_LIMITS(val);
        1:  298:            printf("\n%lf\n\n", CONV_UM_TO_OZFT2(val) );
        1:  299:            printf("Converted using the TWC.\n");
        1:  300:            return 1;
        -:  301:        }
       12:  302:        if(!(strcmp("--convert-ozft2-mil", argv[i]))) {
        1:  303:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  304:            CHECK_LIMITS(val);
        1:  305:            printf("\n%lf\n\n", CONV_OZFT2_TO_MIL(val));
        1:  306:            printf("Converted using the TWC.\n");
        1:  307:            return 1;
        -:  308:        }
       11:  309:        if(!(strcmp("--convert-ozft2-mm", argv[i]))) {
        1:  310:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  311:            CHECK_LIMITS(val);
        1:  312:            printf("\n%lf\n\n", CONV_OZFT2_TO_MM(val));
        1:  313:            printf("Converted using the TWC.\n");
        1:  314:            return 1;
        -:  315:        }
       10:  316:        if(!(strcmp("--convert-ozft2-um", argv[i]))) {
        1:  317:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  318:            CHECK_LIMITS(val);
        1:  319:            printf("\n%lf\n\n", CONV_OZFT2_TO_UM(val));
        1:  320:            printf("Converted using the TWC.\n");
        1:  321:            return 1;
        -:  322:        }
        9:  323:        if(!(strcmp("--convert-mm-mil", argv[i]))) {
        1:  324:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  325:            CHECK_LIMITS(val);
        1:  326:            printf("\n%lf\n\n", CONV_MM_TO_MIL(val));
        1:  327:            printf("Converted using the TWC.\n");
        1:  328:            return 1;
        -:  329:        }
        8:  330:        if(!(strcmp("--convert-mil-mm", argv[i]))) {
        1:  331:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  332:            CHECK_LIMITS(val);
        1:  333:            printf("\n%lf\n\n", CONV_CM2_TO_INCH2(val));
        1:  334:            printf("Converted using the TWC.\n");
        1:  335:            return 1;
        -:  336:        }
        7:  337:        if(!(strcmp("--convert-F-C", argv[i]))) {
        1:  338:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  339:            CHECK_LIMITS(val);
        1:  340:            printf("\n%lf\n\n", CONV_FAHR_TO_CELS(val));
        1:  341:            printf("Converted using the TWC.\n");
        1:  342:            return 1;
        -:  343:        }
        6:  344:        if(!(strcmp("--convert-C-F", argv[i]))) {
        1:  345:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  346:            CHECK_LIMITS(val);
        1:  347:            printf("\n%lf\n\n", CONV_CELS_TO_FAHR(val));
        1:  348:            printf("Converted using the TWC.\n");
        1:  349:            return 1;
        -:  350:        }
        5:  351:        if(!(strcmp("--convert-WmK-BTUhftF", argv[i]))) {
        1:  352:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  353:            CHECK_LIMITS(val);
        1:  354:            printf("\n%lf\n\n", CONV_WmK_TO_BTUhftF(val));
        1:  355:            printf("Converted using the TWC.\n");
        1:  356:            return 1;
        -:  357:        }
        4:  358:        if(!(strcmp("--convert-BTUhftF-WmK", argv[i]))) {
        1:  359:            CHECK_RES(sscanf(argv[i + 1], "%lf", &val));
        1:  360:            CHECK_LIMITS(val);
        1:  361:            printf("\n%lf\n\n", CONV_BTUhftF_TO_WmK(val));
        1:  362:            printf("Converted using the TWC.\n");
        1:  363:            return 1;
        -:  364:        }
        -:  365:
        -:  366:        /* Just ignore these two since they are checked before */
        3:  367:        if(!(strcmp("--standard", argv[i]))) {
        1:  368:            i++;
        1:  369:            continue;
        -:  370:        }
        2:  371:        if(!(strcmp("--method", argv[i]))) {
        1:  372:            i++;
        1:  373:            continue;
        -:  374:        }
        -:  375:
        -:  376:        /* Error checking */
        1:  377:        fprintf(stderr, "\nUnknown option '%s', exiting.\n", argv[i]);
        1:  378:        return 1;
        -:  379:    }
        -:  380:
        -:  381:    /* At least current and copper weight should be entered */
       11:  382:    if((ip->current.val == 0) || ip->copper_weight.val == 0) {
        1:  383:        fprintf(stderr, "\nPlease input at least the Current and the Copper Weight.\n\n");
        1:  384:        return 1;
        -:  385:    }
       10:  386:    return 0;
       33:  387:}
        -:  388:
        1:  389:int get_standard_method(int* argc, char** argv, ip_t* ip) {
        1:  390:    char* standard_arr[] = {"IPC2221", "IPC2152", "afko"}; /* Standard names array */
        1:  391:    int standard_const[] = {2221, 2152, 666}; /* Number representation of the standards */
        1:  392:    char method_arr[] = {'A', 'B'}; /* Method array */
        1:  393:    char strval[10] = "\0"; /* Temp value for the string argument */
        -:  394:
        -:  395:    /* Get the sizes of the arrays */
        1:  396:    unsigned char ssize = sizeof(standard_arr) / sizeof(standard_arr[0]);
        1:  397:    unsigned char msize = sizeof(method_arr) / sizeof(method_arr[0]);
        -:  398:
        -:  399:    /* Index where the input was matched to the available standards */
        -:  400:    unsigned char index;
        -:  401:
        7:  402:    for(int i = 1; i < *argc; i++) {
        6:  403:        if(!(strcmp("--standard", argv[i]))) {
        1:  404:            CHECK_RES(sscanf(argv[i + 1], "%s", strval));
        1:  405:            CHECK_RET(check_standard(strval, standard_arr, ssize, &index));
        1:  406:            ip->standard.str = strval;
        1:  407:            ip->standard.num = standard_const[index];
        1:  408:            i++;
        1:  409:            continue;
        -:  410:        }
        5:  411:        if(!(strcmp("--method", argv[i]))) {
        1:  412:            CHECK_RES(sscanf(argv[i + 1], "%s", strval));
        1:  413:            CHECK_RET(check_method(strval[0], method_arr, msize));
        1:  414:            ip->method = strval[0];
        1:  415:            i++;
        1:  416:            continue;
        -:  417:        }
        4:  418:    }
        1:  419:    return 0;
        1:  420:}
        -:  421:
        3:  422:int check_standard(char* strval, char** standard_arr, unsigned int size, unsigned char* index) {
        3:  423:    bool okflag = false;
        7:  424:    for(int i = 0; i < size; i++) {
        6:  425:        if(!(strcmp(strval, standard_arr[i]))) {
        2:  426:            *index = i;
        2:  427:            okflag = true;
        2:  428:            break;
        -:  429:        }
        4:  430:    }
        -:  431:
        -:  432:    /* In the case where no match is made */
        3:  433:    if(!okflag) {
        1:  434:        fprintf(stderr, "\nUnknown standard (%s) used...\n", strval);
        1:  435:        return 1;
        -:  436:    }
        -:  437:
        2:  438:    return 0;
        3:  439:}
        -:  440:
        3:  441:int check_method(char chrval, char* method_arr, unsigned int size){
        3:  442:    bool okflag = false;
        6:  443:    for(int i = 0; i < size; i++) {
        5:  444:        if(chrval == method_arr[i]) {
        2:  445:            okflag = true;
        2:  446:            break;
        -:  447:        }
        3:  448:    }
        -:  449:
        3:  450:    if(!okflag) {
        1:  451:        fprintf(stderr, "\nUnknown method (%c) used...\n", chrval);
        1:  452:        return 1;
        -:  453:    }
        -:  454:
        2:  455:    return 0;
        3:  456:}
        -:  457:
        3:  458:int set_outu_IPC2221(ip_t* ip, op_t* op) {
        3:  459:    switch (ip->uflag) {
        -:  460:        case 'm':
        1:  461:            op->extl.cs_area.units = "mm^2";
        1:  462:            op->extl.cs_area.val = CONV_MIL2_TO_MM2(op->extl.cs_area.val);
        1:  463:            op->extl.trace_width.units = "mm";
        1:  464:            op->extl.trace_width.val = CONV_MIL_TO_MM(op->extl.trace_width.val);
        -:  465:
        1:  466:            op->intl.cs_area.units = "mm^2";
        1:  467:            op->intl.cs_area.val = CONV_MIL2_TO_MM2(op->intl.cs_area.val);
        1:  468:            op->intl.trace_width.units = "mm";
        1:  469:            op->intl.trace_width.val = CONV_MIL_TO_MM(op->intl.trace_width.val);
        1:  470:            break;
        -:  471:        case 'i':
        1:  472:            op->extl.cs_area.units = "mil^2";
        1:  473:            op->extl.trace_width.units = "mil";
        1:  474:            op->intl.cs_area.units = "mil^2";
        1:  475:            op->intl.trace_width.units = "mil";
        1:  476:            break;
        -:  477:        default:
        1:  478:            fprintf(stderr, "\nShould be impossible to reach this condition...\n");
        1:  479:            return 1;
        -:  480:    }
        2:  481:    return 0;
        3:  482:}
        -:  483:
        3:  484:int set_outu_IPC2152(ip_t* ip, op_t* op) {
        3:  485:    switch (ip->uflag) {
        -:  486:        case 'm':
        1:  487:            op->layer.cs_area.units = "mm^2";
        1:  488:            op->layer.cs_area.val = CONV_MIL2_TO_MM2(op->layer.cs_area.val);
        1:  489:            op->layer.trace_width.units = "mm";
        1:  490:            op->layer.trace_width.val = CONV_MIL_TO_MM(op->layer.trace_width.val);
        1:  491:            op->layer.corr_cs_area.units = "mm^2";
        1:  492:            op->layer.corr_cs_area.val = CONV_MIL2_TO_MM2(op->layer.corr_cs_area.val);
        1:  493:            op->layer.corr_trace_width.units = "mm";
        1:  494:            op->layer.corr_trace_width.val = CONV_MIL_TO_MM(op->layer.corr_trace_width.val);
        1:  495:            break;
        -:  496:        case 'i':
        1:  497:            op->layer.cs_area.units = "mil^2";
        1:  498:            op->layer.trace_width.units = "mil";
        1:  499:            op->layer.corr_cs_area.units = "mil^2";
        1:  500:            op->layer.corr_trace_width.units = "mil";
        1:  501:            break;
        -:  502:        default:
        1:  503:            fprintf(stderr, "\nShould be impossible to reach this condition...\n");
        1:  504:            return 1;
        -:  505:    }
        2:  506:    return 0;
        3:  507:}
        -:  508:
        1:  509:void set_defv_IPC2221(ip_t* ip) {
        1:  510:    ip->current.outval = 0;      
        1:  511:    ip->current.val = 0;      
        1:  512:    ip->current.units = "A";      
        -:  513:
        1:  514:    ip->copper_weight.outval = 0;      
        1:  515:    ip->copper_weight.val = 0;      
        1:  516:    ip->copper_weight.units = "oz/ft^2";      
        -:  517:
        1:  518:    ip->temperature_rise.outval = 10;      
        1:  519:    ip->temperature_rise.val = 10;      
        1:  520:    ip->temperature_rise.units = "C";      
        -:  521:
        1:  522:    ip->temperature_ambient.outval = 25;   
        1:  523:    ip->temperature_ambient.val = 25;   
        1:  524:    ip->temperature_ambient.units = "C";   
        -:  525:
        1:  526:    ip->trace_length.outval = 0;           
        1:  527:    ip->trace_length.val = 0;           
        1:  528:    ip->trace_length.units = "cm";           
        -:  529:
        1:  530:    ip->resistivity.outval = 1.72e-8; // Annealed copper
        1:  531:    ip->resistivity.val = 1.72e-8;
        1:  532:    ip->resistivity.units = "Ohm m";
        -:  533:
        1:  534:    ip->a.outval = 0.00393; // Annealed copper
        1:  535:    ip->a.val = 0.00393;
        1:  536:    ip->a.units = "1/C";
        1:  537:}
        -:  538:
        1:  539:void set_defv_IPC2152_A(ip_t* ip) {
        1:  540:    ip->current.outval = 0;      
        1:  541:    ip->current.val = 0;      
        1:  542:    ip->current.units = "A";      
        -:  543:
        1:  544:    ip->copper_weight.outval = 0;      
        1:  545:    ip->copper_weight.val = 0;      
        1:  546:    ip->copper_weight.units = "oz/ft^2";      
        -:  547:
        1:  548:    ip->temperature_rise.outval = 10;      
        1:  549:    ip->temperature_rise.val = 10;      
        1:  550:    ip->temperature_rise.units = "C";      
        -:  551:
        1:  552:    ip->trace_length.outval = 0;           
        1:  553:    ip->trace_length.val = 0;           
        1:  554:    ip->trace_length.units = "cm";           
        -:  555:
        1:  556:    ip->plane_area.outval = 0;
        1:  557:    ip->plane_area.val = 0;
        1:  558:    ip->plane_area.units = "in^2"; 
        -:  559:
        1:  560:    ip->plane_distance.outval = 0;
        1:  561:    ip->plane_distance.val = 0;
        1:  562:    ip->plane_distance.units = "mil"; 
        -:  563:
        1:  564:    ip->pcb_thickness.outval = 62;
        1:  565:    ip->pcb_thickness.val = 62;
        1:  566:    ip->pcb_thickness.units = "mil"; 
        -:  567:
        1:  568:    ip->resistivity.outval = 1.72e-8; // Annealed copper
        1:  569:    ip->resistivity.val = 1.72e-8;
        1:  570:    ip->resistivity.units = "Ohm m";
        -:  571:
        1:  572:    ip->a.outval = 0.00393;
        1:  573:    ip->a.val = 0.00393;
        1:  574:    ip->a.units = "1/C";
        -:  575:
        -:  576:    /* Set modifier defaults */
        1:  577:    ip->cf.copper_weight = 1;
        1:  578:    ip->cf.temperature_rise = 1;
        1:  579:    ip->cf.plane_area = 1;
        1:  580:    ip->cf.pcb_thickness = 1;
        1:  581:    ip->cf.plane_distance = 1;
        1:  582:}
        -:  583:
        1:  584:void set_defv_IPC2152_B(ip_t* ip) {
        -:  585:    /* Set input value defaults */
        1:  586:    ip->current.outval = 0;      
        1:  587:    ip->current.val = 0;      
        1:  588:    ip->current.units = "A";      
        -:  589:
        1:  590:    ip->copper_weight.outval = 0;      
        1:  591:    ip->copper_weight.val = 0;      
        1:  592:    ip->copper_weight.units = "oz/ft^2";      
        -:  593:
        1:  594:    ip->temperature_rise.outval = 10;      
        1:  595:    ip->temperature_rise.val = 10;      
        1:  596:    ip->temperature_rise.units = "C";      
        -:  597:
        1:  598:    ip->trace_length.outval = 0;           
        1:  599:    ip->trace_length.val = 0;           
        1:  600:    ip->trace_length.units = "cm";           
        -:  601:
        1:  602:    ip->plane_distance.outval = 0;
        1:  603:    ip->plane_distance.val = 0;
        1:  604:    ip->plane_distance.units = "mil"; 
        -:  605:
        1:  606:    ip->pcb_thermal_cond.outval = 0.20;
        1:  607:    ip->pcb_thermal_cond.val = CONV_WmK_TO_BTUhftF(0.20);
        1:  608:    ip->pcb_thermal_cond.units = "W/mK"; 
        -:  609:
        1:  610:    ip->pcb_thickness.outval = 62;
        1:  611:    ip->pcb_thickness.val = 62;
        1:  612:    ip->pcb_thickness.units = "mil"; 
        -:  613:
        1:  614:    ip->resistivity.outval = 1.72e-8; // Annealed copper
        1:  615:    ip->resistivity.val = 1.72e-8;
        1:  616:    ip->resistivity.units = "Ohm m";
        -:  617:
        1:  618:    ip->a.outval = 0.00393;
        1:  619:    ip->a.val = 0.00393;
        1:  620:    ip->a.units = "1/C";
        -:  621:
        -:  622:    /* Set modifier defaults */
        1:  623:    ip->cf.copper_weight = 0;
        1:  624:    ip->cf.pcb_thickness = 1;
        1:  625:    ip->cf.plane_distance = 1;
        1:  626:    ip->cf.pcb_thermal_cond = 1;
        1:  627:}
        -:  628:
        6:  629:int sel_functions(ip_t* ip) {
        6:  630:    switch (ip->standard.num) {
        -:  631:        case IPC2221:
        2:  632:            switch (ip->method) {
        -:  633:                case 'A':
        1:  634:                    ip->defv = &set_defv_IPC2221;
        1:  635:                    ip->proc = &calcs_IPC2221; 
        1:  636:                    ip->outu = &set_outu_IPC2221; 
        1:  637:                    ip->outp = &output_results_IPC2221; 
        1:  638:                    break;
        -:  639:                default:
        1:  640:                    fprintf(stderr, "\nMethod %c for the IPC-%d doesn't exist.\n", ip->method, ip->standard.num);
        1:  641:                    return 1;
        1:  642:            }
        -:  643:        case IPC2152:
        4:  644:            switch (ip->method) {
        -:  645:                case 'A':
        2:  646:                    ip->defv = &set_defv_IPC2152_A;
        2:  647:                    ip->proc = &calcs_IPC2152_A; 
        2:  648:                    ip->outu = &set_outu_IPC2152; 
        2:  649:                    ip->outp = &output_results_IPC2152_A; 
        2:  650:                    break;
        -:  651:                case 'B':
        1:  652:                    ip->defv = &set_defv_IPC2152_B;
        1:  653:                    ip->proc = &calcs_IPC2152_B; 
        1:  654:                    ip->outu = &set_outu_IPC2152; 
        1:  655:                    ip->outp = &output_results_IPC2152_B; 
        1:  656:                    break;
        -:  657:                default:
        1:  658:                    fprintf(stderr, "\nMethod %c for the IPC-%d doesn't exist.\n", ip->method, ip->standard.num);
        1:  659:                    return 1;
        -:  660:            }
        3:  661:            break;
        -:  662:        default:
        1:  663:            fprintf(stderr, "\nStandard IPC-%d doesn't exist.\n",ip->standard.num);
        1:  664:            return 1;
        -:  665:    }
        3:  666:    return 0;
        6:  667:}
        -:  668:
        7:  669:void autogen_file_name(char* fname) {
        7:  670:    strcpy(fname, "twc-output-"); 
        7:  671:    strcat(fname, get_time()); 
        7:  672:    strcat(fname, ".txt");
        7:  673:}
        -:  674:
        9:  675:void set_output_file(ofile_t* ofile, char* optarg) {
        9:  676:    ofile->fname = calloc(OUT_FILE_MAX , sizeof(char));
        -:  677:
        -:  678:    /* If given a . use the current directory for the output */
        9:  679:    if (*optarg == '.') {
        3:  680:        autogen_file_name(ofile->fname);
        -:  681:    /* If given a path with no name, autogenerate the name at that path */
        9:  682:    } else if (optarg[strlen(optarg) - 1] == '/') {
        3:  683:        ofile->path = malloc(sizeof(char) * PATH_MAX); // PATH_MAX = 260
        3:  684:        strcpy(ofile->path, optarg); 
        3:  685:        autogen_file_name(ofile->fname);
        -:  686:    /* Last case is a file name */ 
        3:  687:    } else {
        3:  688:        strcpy(ofile->fname, optarg); 
        -:  689:    }
        -:  690:
        9:  691:    ofile->dest = malloc(sizeof(char) * (strlen(ofile->path) + strlen(ofile->fname)));
        9:  692:    sprintf(ofile->dest, "%s%s", ofile->path, ofile->fname);
        9:  693:}
        -:  694:
        1:  695:void calcs_IPC2221(ip_t* ip, op_t* op) {
        1:  696:    op->extl.cs_area.val = pow(ip->current.val/(k_EXT * pow(ip->temperature_rise.val, 0.44)), 1/0.725); 
        1:  697:    calc_w_r_vd_pl(ip, &op->extl);
        1:  698:    op->intl.cs_area.val = pow(ip->current.val/(k_INT * pow(ip->temperature_rise.val, 0.44)), 1/0.725); 
        1:  699:    calc_w_r_vd_pl(ip, &op->intl);
        1:  700:}
        -:  701:
        3:  702:void calcs_IPC2152_A(ip_t* ip, op_t* op) {
        -:  703:    /* Different one on the website, and different one in the website code */
        3:  704:    op->layer.cs_area.val = (110.515 * pow(ip->temperature_rise.val, -0.871) + 0.803) * pow(ip->current.val, 0.868 * pow(ip->temperature_rise.val, -0.102) + 1.129);    
        -:  705:    /* op->layer.cs_area = (117.555 * pow(ip->temperature_rise.val, -0.913) + 1.15) * pow(ip->current.val, 0.84 * pow(ip->temperature_rise.val, -0.018) + 1.159);  */
        -:  706:
        -:  707:    /* Copper weight correction factor */
        3:  708:    if (ip->copper_weight.val == 2) {
        1:  709:        ip->cf.copper_weight = -0.0185 * log(ip->current.val) + 0.9861;
        3:  710:    } else if (ip->copper_weight.val == 3) {
        1:  711:        ip->cf.copper_weight = 1;
        1:  712:    } else {
        1:  713:        ip->cf.copper_weight = -0.0318 * log(ip->current.val) + 0.9128; 
        -:  714:    }
        -:  715:
        -:  716:    /* PCB thickness correction factor */
        3:  717:    if (ip->pcb_thickness.val != 0) {
        3:  718:        ip->cf.pcb_thickness = 25.959 * pow(ip->pcb_thickness.val, -0.7666);
        3:  719:    }
        -:  720:
        -:  721:    /* Plane area correction factor */
        3:  722:    if (ip->plane_area.val >= 40) {
        1:  723:        ip->cf.plane_area = 0.89;
        3:  724:    } else if (ip->plane_area.val >= 20) {
        1:  725:        ip->cf.plane_area = 0.94;
        1:  726:    } else {
        1:  727:        ip->cf.plane_area = 1;
        -:  728:    } // Plane Area in inch^2 but must be >=20 for it to be modified? sus...
        -:  729:
        -:  730:    /* Plane distance correction factor */
        3:  731:    if (ip->plane_distance.val > 125) {
        1:  732:        ip->cf.plane_distance = 1;
        1:  733:    } else {
        2:  734:        ip->cf.plane_distance = 0.0031 * ip->plane_distance.val + 0.4054;
        -:  735:    }
        -:  736:
        -:  737:    /* Calculate the corrected temperature rise */
        3:  738:    ip->cf.temperature_rise = ip->temperature_rise.val / (ip->cf.copper_weight * ip->cf.pcb_thickness * ip->cf.plane_distance * ip->cf.plane_area);
        -:  739:
        -:  740:    /* Calculate the corrected CS area */
        3:  741:    op->layer.corr_cs_area.val = (110.515 * pow(ip->cf.temperature_rise, -0.871) + 0.803) * pow(ip->current.val, 0.868 * pow(ip->cf.temperature_rise, -0.102) + 1.129);    
        -:  742:
        -:  743:    /* Corrected Trace Width */
        3:  744:    op->layer.corr_trace_width.val = 0.7692 * calc_trace_width_mils(ip, &op->layer.corr_cs_area.val) * 1.378; // multiply by 1.378 to remove the conversion inside the function
        -:  745:
        3:  746:    calc_w_r_vd_pl(ip, &op->layer);
        -:  747:
        3:  748:    op->layer.trace_width.val = 0.7692 * calc_trace_width_mils(ip, &op->layer.cs_area.val) * 1.378; // overwrites the result from calc_w_r_vd_pl()
        3:  749:}
        -:  750:
        1:  751:void calcs_IPC2152_B(ip_t* ip, op_t* op) {
        1:  752:    op->layer.cs_area.val = pow(ip->current.val/(0.089710902134 * pow(ip->temperature_rise.val, 0.39379253898)), 1/(0.50382053698 * pow(ip->temperature_rise.val, 0.038495772461)));
        -:  753:
        -:  754:    /* Coefficients array */
        1:  755:    double coeff_arr[6][4] = {
        -:  756:        {0.98453567795,     -0.22281787548,     0.20061423196,      -0.041541116264},
        -:  757:        {-0.01657194921,     0.00017520059279, -0.0050615234096,     0.002281483634},
        -:  758:        {0.00088711317661,   0.0013631745743,  -0.0002237330971,    -0.00010974218613},
        -:  759:        {-66729255031e-16,  -0.00014976736827,  58082340133e-15,    -24728159584e-16},
        -:  760:        {-7.9576264561e-7,   55788354958e-16,  -24912026388e-16,     2.4000295954e-7},
        -:  761:        {1.6619678738e-8,   -7.1122635445e-8,   3.3800191741e-8,    -3.9797591878e-9}
        -:  762:    };
        -:  763:
        7:  764:    for(int i = 0; i < 6; i++) {
       30:  765:        for(int c = 0; c < 4; c++) {
        -:  766:            /* Copper weight here must be in oz/ft2 */
       24:  767:            ip->cf.copper_weight += coeff_arr[i][c] * pow(ip->copper_weight.val, c) * pow(ip->current.val, i); 
       24:  768:        }
        6:  769:    }
        -:  770:
        -:  771:    /* PCB Thickness must be in mil */
        1:  772:    ip->cf.pcb_thickness = 24.929779905 * pow(ip->pcb_thickness.val, -0.75501997929);
        -:  773:
        -:  774:    /* Plane Distance must be in mil */
        1:  775:    if(ip->plane_distance.val != 0) {
        1:  776:        ip->cf.plane_distance = 0.0031298662911 * ip->plane_distance.val + 0.40450883823;
        1:  777:    }
        -:  778:
        -:  779:    /* PCB Thermal Conductivity must be in BTU/h*ft*F */
        1:  780:    ip->cf.pcb_thermal_cond = -1.4210148167 * ip->pcb_thermal_cond.val + 1.1958174134;
        -:  781:
        -:  782:    /* Corrected CS area */
        1:  783:    op->layer.corr_cs_area.val = op->layer.cs_area.val * ip->cf.copper_weight * ip->cf.pcb_thickness * ip->cf.plane_distance * ip->cf.pcb_thermal_cond;
        -:  784:
        -:  785:    /* Corrected Trace Width */
        1:  786:    op->layer.corr_trace_width.val = calc_trace_width_mils(ip, &op->layer.corr_cs_area.val);
        -:  787:
        1:  788:    calc_w_r_vd_pl(ip, &op->layer);
        1:  789:}
        -:  790:
        7:  791:void calc_w_r_vd_pl(ip_t* ip, layer_t* layer) {
        7:  792:    layer->trace_width.val = calc_trace_width_mils(ip, &layer->cs_area.val);
        7:  793:    if (ip->trace_length.val > 0) {
        7:  794:        layer->resistance.val  = calc_resistance(ip, &layer->cs_area.val); 
        7:  795:    }
        7:  796:    layer->voltage_drop.val = calc_vdrop(ip, &layer->resistance.val); 
        7:  797:    layer->power_loss.val = calc_power_loss(ip, &layer->voltage_drop.val);
        7:  798:}
        -:  799:
       15:  800:double calc_trace_width_mils(ip_t* ip, double* cs_area) {
       15:  801:    return *cs_area/CONV_OZFT2_TO_MIL(ip->copper_weight.val);
        -:  802:}
        -:  803:
        8:  804:double calc_resistance(ip_t* ip, double* cs_area) {
        8:  805:    return ((ip->trace_length.val * ip->resistivity.val)/(CONV_MIL2_TO_CM2(*cs_area))) * (1 + (ip->a.val * ((ip->temperature_rise.val + ip->temperature_ambient.val) - ip->temperature_ambient.val)));
        -:  806:}
        -:  807:
        9:  808:double calc_vdrop(ip_t* ip, double* resistance) {
        9:  809:    return ip->current.val * (*resistance); 
        -:  810:}
        -:  811:
        8:  812:double calc_power_loss(ip_t* ip, double* vdrop) {
        8:  813:    return ip->current.val * (*vdrop);
        -:  814:}
        -:  815:
        8:  816:char* get_time() {
        8:  817:    time_t time_since_epoch = time(NULL);
        8:  818:    struct tm *tm = localtime(&time_since_epoch);
        -:  819:    static char s[13];
        8:  820:    strftime(s, sizeof(s), "%d%m%y%H%M%S", tm);
        8:  821:    return s;
        -:  822:}
        -:  823:
        1:  824:int output_results_IPC2221(ip_t* ip, op_t* op, FILE * file) {
        2:  825:    fprintf(file,   
        -:  826:            "\n"
        -:  827:            "Current:\t\t%lf\t[%s]\n"
        -:  828:            "Copper Weight:\t\t%lf\t[%s]\n"
        -:  829:            "Temperature, Rise:\t%lf\t[%s]\n"
        -:  830:            "Temperature, Ambient:\t%lf\t[%s]\n"
        -:  831:            "Trace Length:\t\t%lf\t[%s]\n",
        1:  832:            ip->current.outval, ip->current.units, ip->copper_weight.outval, ip->copper_weight.units, ip->temperature_rise.outval, ip->temperature_rise.units, ip->temperature_ambient.val, ip->temperature_ambient.units, ip->trace_length.outval, ip->trace_length.units);
        -:  833:
        2:  834:    fprintf(file,   
        -:  835:            "\n\n"
        -:  836:            "        External Layers\n"
        -:  837:            "Area: \t\t\t%lf\t[%s]\n"
        -:  838:            "Width:\t\t\t%lf\t[%s]\n"
        1:  839:            ,op->extl.cs_area.val, op->extl.cs_area.units, op->extl.trace_width.val, op->extl.trace_width.units);
        -:  840:
        2:  841:    fprintf(file,
        1:  842:            ip->trace_length.val > 0 ? 
        -:  843:            "Resistance:\t\t%lf\t[Ohm]\n"
        -:  844:            "Voltage Drop:\t\t%lf\t[V]\n"
        -:  845:            "Power Loss:\t\t%lf\t[W]\n" : "\r",
        1:  846:            op->extl.resistance.val, op->extl.voltage_drop.val, op->extl.power_loss.val);
        -:  847:
        1:  848:    fprintf(file,"\n\n");
        -:  849:
        2:  850:    fprintf(file,   
        -:  851:            "        Internal Layers\n"
        -:  852:            "Area: \t\t\t%lf\t[%s]\n"
        -:  853:            "Width:\t\t\t%lf\t[%s]\n"
        1:  854:            ,op->intl.cs_area.val, op->intl.cs_area.units, op->intl.trace_width.val, op->intl.trace_width.units);
        -:  855:
        2:  856:    fprintf(file,
        1:  857:            ip->trace_length.val > 0 ? 
        -:  858:            "Resistance:\t\t%lf\t[Ohm]\n"
        -:  859:            "Voltage Drop:\t\t%lf\t[V]\n"
        -:  860:            "Power Loss:\t\t%lf\t[W]\n" : "\r",
        1:  861:            op->intl.resistance.val, op->intl.voltage_drop.val, op->intl.power_loss.val);
        -:  862:
        1:  863:    fprintf(file,"\n");
        -:  864:
        1:  865:    fprintf(file,
        -:  866:            "\n- Values of k used in calculating the cs_area:\n\n"
        -:  867:            "\tk = %.7lf (Internal layers)\n"
        -:  868:            "\tk = %.7lf (External layers)\n",
        -:  869:            k_INT, k_EXT);
        -:  870:
        2:  871:    fprintf(file, ip->trace_length.val == 0 ? 
        -:  872:            "\n- Use trace length with '-l' to get voltage, resistance and power calculations.\n" : 
        -:  873:            "\n- Constants used for the P/I/V calculations were,\n\n"
        -:  874:            "\ta = %.7lf (Temperature Coefficient)\n"
        -:  875:            "%6srho = %.7lf (Resistivity)\n",
        1:  876:            ip->a.val, " " ,ip->resistivity.val); 
        -:  877:
        1:  878:    fprintf(file,   
        -:  879:            "\n- Constants and method used were derived from http://circuitcalculator.com/wordpress/2006/03/12/pcb-via-calculator/.\n");
        -:  880:
        1:  881:    fprintf(file, DISCLAIMER_STR);
        -:  882:
        1:  883:    return EXIT_SUCCESS;
        -:  884:}
        -:  885:
        1:  886:int output_results_IPC2152_A(ip_t* ip, op_t *op, FILE *file) {
        2:  887:    fprintf(file,
        -:  888:            "\n"
        -:  889:            "Current:\t\t%lf\t[%s]\n"
        -:  890:            "Copper Weight:\t\t%lf\t[%s]\n"
        -:  891:            "Temperature, Rise:\t%lf\t[%s]\n"
        -:  892:            "Trace Length:\t\t%lf\t[%s]\n"
        -:  893:            "PCB Thickness:\t\t%lf\t[%s]\n"
        -:  894:            "Plane Distance:\t\t%lf\t[%s]\n"
        -:  895:            "Plane Area:\t\t%lf\t[%s]\n", 
        1:  896:            ip->current.outval, ip->current.units, ip->copper_weight.outval, ip->copper_weight.units, ip->temperature_rise.outval, ip->temperature_rise.units, ip->trace_length.outval, ip->trace_length.units, ip->pcb_thickness.outval, ip->pcb_thickness.units, ip->plane_distance.outval, ip->plane_distance.units, ip->plane_area.outval, ip->plane_area.units);
        -:  897:
        2:  898:    fprintf(file,
        -:  899:            "\n"
        -:  900:            "Area: \t\t\t%lf\t[%s]\n"
        -:  901:            "Corrected Area: \t%lf\t[%s]\n"
        -:  902:            "Width:\t\t\t%lf\t[%s]\n"
        -:  903:            "Corrected Width: \t%lf\t[%s]\n",
        1:  904:            op->layer.cs_area.val, op->layer.cs_area.units, op->layer.corr_cs_area.val, op->layer.corr_cs_area.units, op->layer.trace_width.val, op->layer.trace_width.units, op->layer.corr_trace_width.val, op->layer.corr_trace_width.units);
        -:  905:
        2:  906:    fprintf(file,
        1:  907:            ip->trace_length.val > 0 ? 
        -:  908:            "Resistance:\t\t%lf\t[Ohm]\n"
        -:  909:            "Voltage Drop:\t\t%lf\t[V]\n"
        -:  910:            "Power Loss:\t\t%lf\t[W]\n" : "\r",
        1:  911:            op->layer.resistance.val, op->layer.voltage_drop.val, op->layer.power_loss.val);
        -:  912:
        2:  913:    fprintf(file, 
        -:  914:            "\n"
        -:  915:            "Copper Weight CF:\t%lf\t[units]\n"
        -:  916:            "PCB Thickness CF:\t%lf\t[units]\n"
        -:  917:            "Plane Area CF:\t\t%lf\t[units]\n" 
        -:  918:            "Plane Distance CF:\t%lf\t[units]\n"
        -:  919:            "Temperature Rise CF:\t%lf\t[units]\n",
        1:  920:            ip->cf.copper_weight, ip->cf.pcb_thickness, ip->cf.plane_area, ip->cf.plane_distance,ip->cf.temperature_rise);
        -:  921:
        2:  922:    fprintf(file, ip->trace_length.val == 0 ? 
        -:  923:            "\n- Use trace length with '-l' to get voltage, resistance and power calculations.\n" : 
        -:  924:            "\n- Constants used for the P/I/V calculations were,\n\n"
        -:  925:            "\ta = %.7lf (Temperature Coefficient)\n"
        -:  926:            "%6srho = %.7lf (Resistivity)\n",
        1:  927:            ip->a.val, " " ,ip->resistivity.val); 
        -:  928:
        1:  929:    fprintf(file,   
        -:  930:            "\n- Constants and method used were derived from https://www.smps.us/pcb-calculator.html.\n");
        -:  931:
        1:  932:    fprintf(file, DISCLAIMER_STR);
        -:  933:
        1:  934:    return EXIT_SUCCESS;
        -:  935:}
        -:  936:
        1:  937:int output_results_IPC2152_B(ip_t* ip, op_t *op, FILE *file) {
        2:  938:    fprintf(file,
        -:  939:            "\n"
        -:  940:            "Current:\t\t%lf\t[%s]\n"
        -:  941:            "Copper Weight:\t\t%lf\t[%s]\n"
        -:  942:            "Temperature, Rise:\t%lf\t[%s]\n"
        -:  943:            "Trace Length:\t\t%lf\t[%s]\n"
        -:  944:            "PCB Thickness:\t\t%lf\t[%s]\n"
        -:  945:            "Plane Distance:\t\t%lf\t[%s]\n"
        -:  946:            "PCB Thermal Cond.:\t%lf\t[%s]\n",
        1:  947:            ip->current.outval, ip->current.units, ip->copper_weight.outval, ip->copper_weight.units, ip->temperature_rise.outval, ip->temperature_rise.units, ip->trace_length.outval, ip->trace_length.units, ip->pcb_thickness.outval, ip->pcb_thickness.units, ip->plane_distance.outval, ip->plane_distance.units, ip->pcb_thermal_cond.outval, ip->pcb_thermal_cond.units);
        -:  948:
        2:  949:    fprintf(file,
        -:  950:            "\n"
        -:  951:            "Area: \t\t\t%lf\t[%s]\n"
        -:  952:            "Corrected Area: \t%lf\t[%s]\n"
        -:  953:            "Width:\t\t\t%lf\t[%s]\n"
        -:  954:            "Corrected Width: \t%lf\t[%s]\n",
        1:  955:            op->layer.cs_area.val, op->layer.cs_area.units, op->layer.corr_cs_area.val, op->layer.corr_cs_area.units, op->layer.trace_width.val, op->layer.trace_width.units, op->layer.corr_trace_width.val, op->layer.corr_trace_width.units);
        -:  956:
        2:  957:    fprintf(file,
        1:  958:            ip->trace_length.val > 0 ? 
        -:  959:            "Resistance:\t\t%lf\t[Ohm]\n"
        -:  960:            "Voltage Drop:\t\t%lf\t[V]\n"
        -:  961:            "Power Loss:\t\t%lf\t[W]\n" : "\r",
        1:  962:            op->layer.resistance.val, op->layer.voltage_drop.val, op->layer.power_loss.val);
        -:  963:
        2:  964:    fprintf(file, 
        -:  965:            "\n"
        -:  966:            "Copper Weight CF:\t%lf\t[units]\n"
        -:  967:            "PCB Thickness CF:\t%lf\t[units]\n"
        -:  968:            "PCB Thermal Cond. CF:\t%lf\t[units]\n"
        -:  969:            "Plane Distance CF:\t%lf\t[units]\n",
        1:  970:            ip->cf.copper_weight, ip->cf.pcb_thickness, ip->cf.pcb_thermal_cond, ip->cf.plane_distance);
        -:  971:
        2:  972:    fprintf(file, ip->trace_length.val == 0 ? 
        -:  973:            "\n- Use trace length with '-l' to get voltage, resistance and power calculations.\n" : 
        -:  974:            "\n- Constants used for the P/I/V calculations were,\n\n"
        -:  975:            "\ta = %.7lf (Temperature Coefficient)\n"
        -:  976:            "%6srho = %.7lf (Resistivity)\n",
        1:  977:            ip->a.val, " " ,ip->resistivity.val); 
        -:  978:
        1:  979:    fprintf(file,   
        -:  980:            "\n- Constants and method used were derived from https://ninjacalc.mbedded.ninja/calculators/electronics/pcb-design/track-current-ipc2152.\n");
        -:  981:
        1:  982:    fprintf(file, DISCLAIMER_STR);
        -:  983:
        1:  984:    return EXIT_SUCCESS;
        -:  985:}
        -:  986:
        -:  987:// TODO: Create help for each option?
        2:  988:int output_help() {
        2:  989:    printf("\nHelp for the Trace Width Calculator (TWC). Specify units with the long options, listed below the short options."
        -:  990:            "\n\t-c, \t--current <Current [A]>\t\t\t\t= Input the trace current in Amps.\n"
        -:  991:            "\t\t--current-mA\n"
        -:  992:            "\n\t-w, \t--copper-weight <Copper Weight [oz/ft^2]>\t= Input the copper weight in oz per ft^2.\n"
        -:  993:            "\t\t--copper-weight-mil\n"
        -:  994:            "\t\t--copper-weight-mm\n"
        -:  995:            "\t\t--copper-weight-um\n"
        -:  996:            "\n\t-r \t--temperature-rise <Temperature Rise [C]>\t= Input the maximum allowed temperature rise in C.\n"
        -:  997:            "\t\t--temperature-rise-F\n"
        -:  998:            "\n\t-a, \t--temperature-ambient <Ambient Temperature [C]>\t= Input the ambient temperature of the trace in C.\n"
        -:  999:            "\t\t--temperature-ambient-F\n"
        -: 1000:            "\n\t-l, \t--trace--length<Trace Length [cm]>\t\t= Input the trace length in centimeters.\n"
        -: 1001:            "\t\t--trace--length-mm\n"
        -: 1002:            "\t\t--trace--length-mil\n"
        -: 1003:            "\n\t-t, \t--pcb-thickness <Thickness [mm]>\t\t= Input the PCB thickness in milimeters.\n"
        -: 1004:            "\t\t--pcb-thickness-mil\n"
        -: 1005:            "\n\t-e, \t--pcb-thermal-conductivity <Therm. Con. [W/mK]>\t= Input the PCB thermal conductivity in Watts per meter Kelvin.\n"
        -: 1006:            "\n\t-p, \t--plane-cs_area <Plane Area [in^2]>\t\t= Input the plane cs_area in inches squared.\n"
        -: 1007:            "\t\t--plane-cs_area-cm2\n"
        -: 1008:            "\n\t-d, \t--plane-distance <Plane Distance [mil]>\t\t= Input the plane distance in mil.\n"
        -: 1009:            "\t\t--plane-distance-mm\n"
        -: 1010:            "\n\t--resistivity <Resistivity [Ohm m]>\t\t\t= Input the resistivity in Ohm meters.\n"
        -: 1011:            "\n\t--temperature-coefficient <Temp. Coefficient [1/C]>\t= Input the temperature coefficient.\n"
        -: 1012:            "\n\t-o <File Name>\t\t\t= Write the name of the outputted file. Use '.txt' to create a text file. Use a single '.' to auto-generate the name based on date/time. Can also write the full path to the file, e.g. 'C:/Users/user/output.txt' or stop at 'C:/Users/user/' to use the auto-generated file name.\n"
        -: 1013:            "\n\t-m, \t--metric\t\t\t\t\t= Make the output units be metric.\n"
        -: 1014:            "\n\t-i, \t--imperial\t\t\t\t\t= Make the output units be imperial. Default behaviour, therefore just implemented for completion.\n"
        -: 1015:            "\n\n\t\t\tCONVERSIONS\n"
        -: 1016:            "\n\t--convert-mil2-cm2\t= From mils sq. to centimeters sq."
        -: 1017:            "\n\t--convert-mil2-mm2\t= From mils sq. to milimeters sq."
        -: 1018:            "\n\t--convert-mm2-mil2\t= From milimeters sq. to mil sq."
        -: 1019:            "\n\t--convert-cm2-in2\t= From cm sq. to inches sq."
        -: 1020:            "\n\t--convert-mil-ozft2\t= From mils to ounce per foot sq."
        -: 1021:            "\n\t--convert-mm-ozft2\t= From milimeters to ounce per foot sq."
        -: 1022:            "\n\t--convert-um-ozft2\t= From micrometers to ounce per foot sq."
        -: 1023:            "\n\t--convert-ozft2-mil\t= From ounce per foot sq. to mils."
        -: 1024:            "\n\t--convert-ozft2-mm\t= From ounce per foot sq. to milimeters."
        -: 1025:            "\n\t--convert-ozft2-um\t= From ounce per foot sq. to micrometers."
        -: 1026:            "\n\t--convert-mm-mil\t= From milimeters to mils."
        -: 1027:            "\n\t--convert-mil-mm\t= From mils to milimeters."
        -: 1028:            "\n\t--convert-F-C\t\t= From Fahrenheit to Celsius."
        -: 1029:            "\n\t--convert-C-F\t\t= From Celsius to Fahrenheit."
        -: 1030:            "\n\t--convert-WmK-BTUhftF\t= From Watts per mili Kelvin to BTU/h*ft*F."
        -: 1031:            "\n\t--convert-BTUhftF-WmK\t= From BTU/h*ft*F to Watts per mili Kelvin."
        -: 1032:            "\n\n");
        -: 1033:
        2: 1034:    return EXIT_SUCCESS;
        -: 1035:}
        -: 1036:
